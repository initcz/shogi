{
  "name": "buster-amd",
  "version": "0.3.1",
  "description": "Extension for testing AMD modules",
  "homepage": "http://busterjs.org/docs/buster-amd",
  "author": {
    "name": "Joakim Ohlrogge"
  },
  "contributors": [
    {
      "name": "Joakim Ohlrogge",
      "url": "http://johlrogge.wordpress.com"
    },
    {
      "name": "Christian Johansen",
      "url": "http://cjohansen.no"
    }
  ],
  "main": "./lib/buster-amd",
  "repository": {
    "type": "git",
    "url": "https://github.com/busterjs/buster-amd.git"
  },
  "license": {
    "type": "BSD",
    "url": "http://gitorious.org/buster/buster-amd/blobs/master/LICENSE"
  },
  "devDependencies": {
    "buster": "~0.7.6",
    "buster-configuration": "~0.7.1"
  },
  "readme": "# buster-amd\n\nA plugin for [BusterJS](http://busterjs.org) that allows you to use an AMD loader to test asynchronous modules. You must provide your own loader. By default, a loader that provides ``require(deps, callback)``\nis assumed. This will eventually be pluggable.\n\n## Install\n\nInstallation is done using npm:\n\n```bash\n$ npm install buster-amd\n```\n\n## Usage\n\nLoad in your configuration file, specifying your loader and the required configuration file as libs.\nYou also need to add the `buster-amd` extension to your configuration::\n\n```javascript\n    var config = module.exports;\n    \n    config[\"Browser tests\"] = {\n        rootPath: \"../\",\n        libs: [\n            \"libs/require.js\",\n            \"requirejs-config.js\"\n        ],\n        sources: [\"src/**/*.js\"],\n        tests: [\"test/**/*.js\"],\n        extensions: [require(\"buster-amd\")]\n    };\n```\n\n* **You should list your tests and sources as normal. Your sources must be\n  specified in the configuration even if you will `require` them from\n  your tests, otherwise, Buster will not make them available on the test server.**\n\nIf you have any issues with paths for your required files, check the configuration section below.\n\nYour tests will drive the show. To run tests with the AMD extension, your\ntests should be wrapped in a call to `define`, which pulls in\ndependencies (i.e. your modules) and in the callback define specs/test cases\nas usual::\n\n```javascript\n    define(['moduleToTest.js'], function(moduleToTest){\n        buster.testCase(\"A test case\", {\n            \"test the module\": function(){\n                assert.isObject(moduleToTest);\n            }\n        });\n    });\n```\n\n\n## Configuration\n\nThe AMD extension has one configuration option: a path mapper. The path mapper\nis an optional function that translates Buster.JS paths (which are absolute,\ne.g. `/test/my-test.js`) to AMD friendly module IDs.\n\nThe default mapper converts `/test/my-test.js` to `test/my-test`, i.e. strips leading\nslash and file suffix::\n\n```javascript\n    function (path) {\n        return path.replace(/\\.js$/, \"\").replace(/^\\//, \"\");\n    }\n```\n\nHowever, if your AMD loader specifies a `basePath` in its configuration the default mapper might cause you issues::\n\n```javascript\n    require.config({\n      baseUrl: 'src/'\n    });\n```\n\nIn this case, every module your loader attempts to load will be prefixed with this basePath::\n\n```\n    src/test/my-test.js\n```\n\nYou don't need to restructure your project to solve this issue.\nIf your tests live outside of that directory, you can fix that with a different mapping function::\n\n```javascript\n    config[\"Browser tests\"] = {\n        rootPath: \"../\",\n        libs: [\n            \"libs/require.js\",\n            \"requirejs-config.js\"\n        ],\n        sources: [\"src/**/*.js\"],\n        tests: [\"test/**/*.js\"],\n        extensions: [require(\"buster-amd\")],\n        \"buster-amd\": {\n            pathMapper: function (path) {\n              // prefix any path starting with a slash with ../\n              return path.replace(/\\.js$/, \"\").replace(/^\\//, \"../\");\n            }\n        }\n    };\n```\n\nIn this case, your AMD loader will load the files with the following path in the browser with\nthe path `src/../test/my-test.js` which is equivalent to `test/my-test.js`\n\n* **If you specify your own mapper and decide not to remove the file extension\n  make sure you understand how your loader deals with files with an extension.\n  require.js for instance will load them with an absolute path, not prefixing these\n  with a `baseUrl` option, but curl.js will treat these files as any other modules.**\n\nAnother example: use the following mapper for AMD loader plugins::\n\n```javascript\n    var config = module.exports;\n    \n    config[\"Browser tests\"] = {\n        rootPath: \"../\",\n        sources: [\"src/**/*.js\"],\n        tests: [\"test/**/*.js\"],\n        extensions: [require(\"buster-amd\")],\n        \"buster-amd\": {\n            pathMapper: function (path) {\n                return \"plugin!\" + path.replace(/^\\//, \"\").replace(/\\.js$/, \"\");\n            }\n        }\n    };\n```\n\n## Examples\n\nCheck the [demos repository](https://github.com/busterjs/demos) for example projects.\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/busterjs/buster-amd/issues"
  },
  "_id": "buster-amd@0.3.1",
  "dist": {
    "shasum": "5f4502fedf4558ce1389701fde7c95fb6d43fa86"
  },
  "_from": "buster-amd@",
  "_resolved": "https://registry.npmjs.org/buster-amd/-/buster-amd-0.3.1.tgz"
}
